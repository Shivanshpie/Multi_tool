import os
import requests
import logging
import time
import subprocess
from time import sleep
from datetime import datetime
import pytz

satish_logo= ''' \033[1;36m

 .d8888b.  888    888 8888888 888     888     d8888 888b    888  .d8888b.  888    888 
d88P  Y88b 888    888   888   888     888    d88888 8888b   888 d88P  Y88b 888    888 
Y88b.      888    888   888   888     888   d88P888 88888b  888 Y88b.      888    888 
 "Y888b.   8888888888   888   Y88b   d88P  d88P 888 888Y88b 888  "Y888b.   8888888888 
    "Y88b. 888    888   888    Y88b d88P  d88P  888 888 Y88b888     "Y88b. 888    888 
      "888 888    888   888     Y88o88P  d88P   888 888  Y88888       "888 888    888 
Y88b  d88P 888    888   888      Y888P  d8888888888 888   Y8888 Y88b  d88P 888    888 
 "Y8888P"  888    888 8888888     Y8P  d88P     888 888    Y888  "Y8888P"  888    888 
                                                                                                                                                                                                     
'''
print(satish_logo)
def satish():
    name = input("Your Name :- ")
    uuid = str(os.geteuid()) + "DS" + str(os.geteuid())
    id = "SHIVANSH :- " + "".join(uuid)
    print("\nYou Get Approved for Using Command Paid Tool 500 Per month")
    print("Your Key:", id)
    try:
        httpChat = requests.get("https://github.com/Shivanshpie/Approval-/blob/main/Approval.txt").text
        if id in httpChat:
            print("\nCongrats! You get approved successfully. Enjoy!")
        else:
            print("\nYour Key is not approved. Please contact the admin.")
            input('\n\nWHEN YOU BUY THE TOOL, PRESS ENTER')
            tks = 'Hello%20Shivansh%20Sir%20!%20Please%20Approve%20My%20Key%20This%20My%20Key%20:%20' + id
            subprocess.run(['am', 'start', f'https://wa.me/+919024263253?text={tks}'], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            exit()
    except Exception as e:
        print(e)
        print("Unable to fetch data from the server.")
        time.sleep(2)
        exit()
satish()
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
def read_file_lines(file_path):
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            return [line.strip() for line in file.readlines()]
    except FileNotFoundError:
        logging.error(f"File not found: {file_path}")
        exit()
    except UnicodeDecodeError as e:
        logging.error(f"Encoding error: {e}")
        print("Please ensure the file is UTF-8 encoded.")
        exit()

def get_tokens():
    choice = input("Choose:\n1. Token File\n2. Manual Input\n=> ")
    if choice == '1':
        file_path = input("Enter token file path: ")
        return read_file_lines(file_path)
    elif choice == '2':
        num_tokens = int(input("Enter number of tokens: "))
        return [input(f"Enter token {i + 1}: ") for i in range(num_tokens)]
    else:
        logging.error("Invalid choice. Exiting.")
        exit()

def get_ids(id_type):
    choice = input(f"Choose:\n1. {id_type} File\n2. Manual Input\n=> ")
    if choice == '1':
        file_path = input(f"Enter {id_type.lower()} file path: ")
        return read_file_lines(file_path)
    elif choice == '2':
        num_ids = int(input(f"Enter number of {id_type}s: "))
        return [input(f"Enter {id_type} {i + 1}: ") for i in range(num_ids)]
    else:
        logging.error("Invalid choice. Exiting.")
        exit()

def is_internet_available():
    try:
        requests.get("https://www.google.com", timeout=5)
        return True
    except requests.ConnectionError:
        return False

def get_user_name(access_token):
    try:
        response = requests.get('https://graph.facebook.com/v17.0/me', params={'access_token': access_token})
        response.raise_for_status()
        return response.json().get('name', 'Unknown User')
    except requests.RequestException as e:
        logging.error(f"Error fetching user name: {e}")
        return 'Unknown User'

def send_message(access_token, thread_id, message):
    url = f"https://graph.facebook.com/v21.0/t_{thread_id}/"
    try:
        response = requests.post(url, data={'message': message, 'access_token': access_token})
        response.raise_for_status()
        return response
    except requests.RequestException as e:
        logging.error(f"Error sending message: {e}")
        return None

def post_comment(access_token, post_id, comment):
    url = f"https://graph.facebook.com/{post_id}/comments"
    try:
        response = requests.post(url, data={'message': comment, 'access_token': access_token})
        response.raise_for_status()
        return response
    except requests.RequestException as e:
        logging.error(f"Error posting comment: {e}")
        return None

def cycle_lines(lines):
    while True:
        for line in lines:
            yield line

def send_messages(access_tokens, thread_ids, messages, name, sleep_time):
    messages_cycle = cycle_lines(messages)
    ist = pytz.timezone('Asia/Kolkata')

    while True:
        for access_token in access_tokens:
            user_name = get_user_name(access_token)
            for thread_id in thread_ids:
                message = f"{name} {next(messages_cycle)}"
                response = send_message(access_token, thread_id, message)
                timestamp = datetime.now(ist).strftime("%Y-%m-%d %H:%M:%S %Z")
                if response and response.status_code == 200:
                    logging.info(f"Message sent successfully by {user_name} to Group ID {thread_id} at {timestamp}")
                else:
                    logging.error(f"Failed to send message by {user_name} to Group ID {thread_id}")
                sleep(sleep_time)

def post_comments(access_tokens, post_ids, comments, name, sleep_time):
    comments_cycle = cycle_lines(comments)
    ist = pytz.timezone('Asia/Kolkata')

    while True:
        for access_token in access_tokens:
            user_name = get_user_name(access_token)
            for post_id in post_ids:
                comment = f"{name} {next(comments_cycle)}"
                response = post_comment(access_token, post_id, comment)
                timestamp = datetime.now(ist).strftime("%Y-%m-%d %H:%M:%S %Z")
                if response and response.status_code == 200:
                    logging.info(f"Comment posted successfully by {user_name} to Post ID {post_id} at {timestamp}")
                else:
                    logging.error(f"Failed to post comment by {user_name} to Post ID {post_id}")
                sleep(sleep_time)

def main():
    while True:
        if not is_internet_available():
            logging.error("No internet connection. Retrying in 10 seconds...")
            sleep(10)
            continue
        print("Choose an option:")
        print("1. Send Messages to Groups")
        print("2. Post Comments to Posts")
        choice = input("Enter your choice: ")

        if choice == '1':
            access_tokens = get_tokens()
            thread_ids = get_ids("Group ID")
            messages = read_file_lines(input("Enter message file path: "))
            name = input("Enter sender name: ")
            sleep_time = float(input("Enter delay between messages (in seconds): "))
            send_messages(access_tokens, thread_ids, messages, name, sleep_time)

        elif choice == '2':
            access_tokens = get_tokens()
            post_ids = get_ids("Post ID")
            comments = read_file_lines(input("Enter comment file path: "))
            name = input("Enter commenter name: ")
            sleep_time = float(input("Enter delay between comments (in seconds): "))
            post_comments(access_tokens, post_ids, comments, name, sleep_time)

        else:
            logging.error("Invalid choice. Please try again.")